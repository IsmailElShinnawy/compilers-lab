package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch7 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#c;f;k;n;o#0,n,1;1,e,2;2,e,3;2,e,5;3,f,4;4,e,7;5,k,6;6,e,7;7,o,8;8,c,9#0#9");
		assertEquals("-1;0;1/2/3/5;4/7;6/7;8;9#c;f;k;n;o#-1,c,-1;-1,f,-1;-1,k,-1;-1,n,-1;-1,o,-1;0,c,-1;0,f,-1;0,k,-1;0,n,1/2/3/5;0,o,-1;1/2/3/5,c,-1;1/2/3/5,f,4/7;1/2/3/5,k,6/7;1/2/3/5,n,-1;1/2/3/5,o,-1;4/7,c,-1;4/7,f,-1;4/7,k,-1;4/7,n,-1;4/7,o,8;6/7,c,-1;6/7,f,-1;6/7,k,-1;6/7,n,-1;6/7,o,8;8,c,9;8,f,-1;8,k,-1;8,n,-1;8,o,-1;9,c,-1;9,f,-1;9,k,-1;9,n,-1;9,o,-1#0#9", nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#f;u;z#0,f,1;1,e,11;2,f,3;3,e,8;4,z,5;5,u,6;6,e,8;7,e,2;7,e,4;8,u,9;9,e,11;10,e,0;10,e,7#10#11");
		assertEquals("-1;0/2/4/7/10;1/3/8/11;5;6/8;9/11#f;u;z#-1,f,-1;-1,u,-1;-1,z,-1;0/2/4/7/10,f,1/3/8/11;0/2/4/7/10,u,-1;0/2/4/7/10,z,5;1/3/8/11,f,-1;1/3/8/11,u,9/11;1/3/8/11,z,-1;5,f,-1;5,u,6/8;5,z,-1;6/8,f,-1;6/8,u,9/11;6/8,z,-1;9/11,f,-1;9/11,u,-1;9/11,z,-1#0/2/4/7/10#1/3/8/11;9/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#r;w;y#0,r,6;0,r,3;0,r,0;0,r,5;0,r,4;0,r,2;0,r,7;0,w,7;0,w,5;0,w,2;0,w,3;0,y,3;0,y,0;0,y,1;0,y,6;0,y,5;0,y,7;1,r,7;1,r,0;1,r,3;1,r,1;1,r,5;1,w,1;1,w,4;1,w,3;1,w,7;1,w,0;1,w,5;1,w,6;1,y,4;1,y,5;1,y,1;1,y,7;1,y,6;1,y,2;2,r,2;2,r,1;2,r,7;2,r,0;2,w,5;2,w,1;2,w,3;2,w,4;2,w,7;2,w,0;2,w,2;2,y,0;2,y,6;2,y,4;2,y,3;2,y,5;2,y,2;2,y,1;3,r,0;3,r,6;3,r,1;3,r,2;3,r,4;3,r,3;3,w,4;3,w,2;3,w,5;3,w,3;3,y,2;3,y,1;3,y,0;3,y,7;4,r,0;4,r,7;4,r,1;4,r,4;4,w,5;4,w,2;4,w,4;4,w,3;4,w,7;4,y,7;4,y,2;4,y,6;4,y,0;5,r,0;5,r,2;5,r,6;5,r,3;5,w,3;5,w,4;5,w,1;5,w,0;5,w,6;5,w,7;5,y,0;5,y,7;5,y,5;5,y,6;6,r,4;6,r,6;6,r,7;6,r,5;6,r,2;6,r,0;6,r,3;6,w,3;6,w,6;6,w,1;6,w,2;6,w,0;6,w,4;6,w,7;6,y,4;6,y,5;6,y,7;6,y,3;6,y,1;6,y,2;6,y,0;7,r,5;7,r,2;7,r,3;7,r,6;7,r,4;7,r,0;7,w,0;7,w,7;7,w,5;7,w,3;7,y,2;7,y,0;7,y,1;7,y,7#6#2;3;4");
		assertEquals("0/1/2/3/4/5/6/7;0/1/2/3/4/5/7;0/1/2/3/4/6/7;0/2/3/4/5/6/7;6#r;w;y#0/1/2/3/4/5/6/7,r,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,w,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,y,0/1/2/3/4/5/6/7;0/1/2/3/4/5/7,r,0/1/2/3/4/5/6/7;0/1/2/3/4/5/7,w,0/1/2/3/4/5/6/7;0/1/2/3/4/5/7,y,0/1/2/3/4/5/6/7;0/1/2/3/4/6/7,r,0/1/2/3/4/5/6/7;0/1/2/3/4/6/7,w,0/1/2/3/4/5/6/7;0/1/2/3/4/6/7,y,0/1/2/3/4/5/6/7;0/2/3/4/5/6/7,r,0/1/2/3/4/5/6/7;0/2/3/4/5/6/7,w,0/1/2/3/4/5/6/7;0/2/3/4/5/6/7,y,0/1/2/3/4/5/6/7;6,r,0/2/3/4/5/6/7;6,w,0/1/2/3/4/6/7;6,y,0/1/2/3/4/5/7#6#0/1/2/3/4/5/6/7;0/1/2/3/4/5/7;0/1/2/3/4/6/7;0/2/3/4/5/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#j;k;u#0,j,1;1,k,2;2,e,3;2,e,5;3,j,4;4,e,7;5,u,6;6,e,7#0#7");
		assertEquals("-1;0;1;2/3/5;4/7;6/7#j;k;u#-1,j,-1;-1,k,-1;-1,u,-1;0,j,1;0,k,-1;0,u,-1;1,j,-1;1,k,2/3/5;1,u,-1;2/3/5,j,4/7;2/3/5,k,-1;2/3/5,u,6/7;4/7,j,-1;4/7,k,-1;4/7,u,-1;6/7,j,-1;6/7,k,-1;6/7,u,-1#0#4/7;6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#o;r#0,o,1;0,o,6;0,o,5;0,o,4;0,o,9;0,r,7;0,r,2;0,r,10;0,r,6;0,r,4;1,o,8;1,o,0;1,o,6;1,o,2;1,o,10;1,r,2;1,r,5;1,r,1;1,r,10;2,o,10;2,o,0;2,o,5;2,o,4;2,o,1;2,r,3;2,r,0;2,r,4;2,r,1;2,r,2;2,r,9;3,o,2;3,o,7;3,o,5;3,o,0;3,o,9;3,o,1;3,r,6;3,r,5;3,r,4;3,r,8;3,r,0;3,r,7;3,r,9;4,o,7;4,o,1;4,o,4;4,o,9;4,o,8;4,o,3;4,r,6;4,r,4;4,r,9;4,r,8;4,r,3;4,r,5;5,o,9;5,o,4;5,o,8;5,o,7;5,o,6;5,r,6;5,r,0;5,r,1;5,r,4;5,r,5;5,r,2;5,r,7;6,o,10;6,o,9;6,o,3;6,o,8;6,o,5;6,o,1;6,r,6;6,r,1;6,r,2;6,r,7;7,o,6;7,o,2;7,o,3;7,o,1;7,r,2;7,r,8;7,r,6;7,r,5;8,o,7;8,o,9;8,o,0;8,o,10;8,r,10;8,r,7;8,r,8;8,r,3;8,r,6;9,o,10;9,o,4;9,o,3;9,o,8;9,o,1;9,o,6;9,r,8;9,r,4;9,r,9;9,r,2;10,o,7;10,o,0;10,o,8;10,o,3;10,r,8;10,r,6;10,r,4;10,r,0#7#3;5;6;10");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;0/1/3/4/5/6/7/8/9/10;1/2/3/6;2/5/6/8;7#o;r#0/1/2/3/4/5/6/7/8/9/10,o,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,r,0/1/2/3/4/5/6/7/8/9/10;0/1/3/4/5/6/7/8/9/10,o,0/1/2/3/4/5/6/7/8/9/10;0/1/3/4/5/6/7/8/9/10,r,0/1/2/3/4/5/6/7/8/9/10;1/2/3/6,o,0/1/2/3/4/5/6/7/8/9/10;1/2/3/6,r,0/1/2/3/4/5/6/7/8/9/10;2/5/6/8,o,0/1/3/4/5/6/7/8/9/10;2/5/6/8,r,0/1/2/3/4/5/6/7/8/9/10;7,o,1/2/3/6;7,r,2/5/6/8#7#0/1/2/3/4/5/6/7/8/9/10;0/1/3/4/5/6/7/8/9/10;1/2/3/6;2/5/6/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#s;u#0,s,6;0,s,4;0,s,5;0,s,8;0,u,1;0,u,0;0,u,2;0,u,8;0,u,5;0,u,3;0,u,9;1,s,6;1,s,9;1,s,3;1,s,5;1,s,1;1,s,8;1,s,2;1,u,5;1,u,2;1,u,6;1,u,7;2,s,9;2,s,4;2,s,5;2,s,2;2,u,9;2,u,0;2,u,6;2,u,8;3,s,5;3,s,4;3,s,7;3,s,1;3,s,9;3,s,0;3,s,8;3,u,9;3,u,1;3,u,4;3,u,3;3,u,2;4,s,8;4,s,6;4,s,3;4,s,9;4,u,5;4,u,6;4,u,9;4,u,4;4,u,8;4,u,3;4,u,2;5,s,6;5,s,8;5,s,5;5,s,3;5,u,3;5,u,0;5,u,4;5,u,1;5,u,2;5,u,8;6,s,1;6,s,4;6,s,8;6,s,9;6,s,6;6,u,2;6,u,7;6,u,1;6,u,8;7,s,2;7,s,5;7,s,6;7,s,8;7,s,9;7,s,3;7,u,0;7,u,5;7,u,6;7,u,9;8,s,2;8,s,5;8,s,3;8,s,4;8,s,0;8,s,1;8,u,7;8,u,8;8,u,5;8,u,1;8,u,4;8,u,6;8,u,3;9,s,5;9,s,8;9,s,6;9,s,1;9,s,4;9,u,0;9,u,7;9,u,3;9,u,2#2#0;2;5;6");
		assertEquals("0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/8/9;0/6/8/9;1/2/3/4/5/6/8/9;2;2/4/5/9#s;u#0/1/2/3/4/5/6/7/8/9,s,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,u,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/8/9,s,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/8/9,u,0/1/2/3/4/5/6/7/8/9;0/6/8/9,s,0/1/2/3/4/5/6/8/9;0/6/8/9,u,0/1/2/3/4/5/6/7/8/9;1/2/3/4/5/6/8/9,s,0/1/2/3/4/5/6/7/8/9;1/2/3/4/5/6/8/9,u,0/1/2/3/4/5/6/7/8/9;2,s,2/4/5/9;2,u,0/6/8/9;2/4/5/9,s,1/2/3/4/5/6/8/9;2/4/5/9,u,0/1/2/3/4/5/6/7/8/9#2#0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/8/9;0/6/8/9;1/2/3/4/5/6/8/9;2;2/4/5/9", nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#b;g;j;p;t#0,p,1;1,e,2;1,e,7;2,b,3;3,g,4;4,j,5;5,t,6;6,e,2;6,e,7#0#7");
		assertEquals("-1;0;1/2/7;2/6/7;3;4;5#b;g;j;p;t#-1,b,-1;-1,g,-1;-1,j,-1;-1,p,-1;-1,t,-1;0,b,-1;0,g,-1;0,j,-1;0,p,1/2/7;0,t,-1;1/2/7,b,3;1/2/7,g,-1;1/2/7,j,-1;1/2/7,p,-1;1/2/7,t,-1;2/6/7,b,3;2/6/7,g,-1;2/6/7,j,-1;2/6/7,p,-1;2/6/7,t,-1;3,b,-1;3,g,4;3,j,-1;3,p,-1;3,t,-1;4,b,-1;4,g,-1;4,j,5;4,p,-1;4,t,-1;5,b,-1;5,g,-1;5,j,-1;5,p,-1;5,t,2/6/7#0#1/2/7;2/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#x;y;z#0,x,1;0,x,7;0,x,6;0,x,4;0,x,5;0,x,0;0,x,8;0,y,8;0,y,1;0,y,7;0,y,6;0,y,2;0,y,4;0,y,5;0,z,6;0,z,2;0,z,1;0,z,3;0,z,8;0,z,7;0,z,0;1,x,1;1,x,2;1,x,4;1,x,8;1,x,0;1,y,2;1,y,7;1,y,1;1,y,6;1,y,4;1,z,5;1,z,7;1,z,8;1,z,3;1,z,6;1,z,2;2,x,2;2,x,0;2,x,6;2,x,5;2,x,4;2,x,3;2,x,8;2,y,1;2,y,5;2,y,7;2,y,3;2,y,2;2,z,7;2,z,2;2,z,4;2,z,8;3,x,7;3,x,1;3,x,3;3,x,4;3,y,2;3,y,4;3,y,6;3,y,8;3,y,7;3,z,4;3,z,5;3,z,8;3,z,7;3,z,1;3,z,3;4,x,5;4,x,0;4,x,8;4,x,3;4,x,7;4,x,1;4,y,3;4,y,7;4,y,8;4,y,0;4,z,4;4,z,5;4,z,3;4,z,2;4,z,7;4,z,0;4,z,6;5,x,2;5,x,3;5,x,5;5,x,7;5,x,1;5,x,6;5,x,0;5,y,1;5,y,0;5,y,8;5,y,7;5,y,3;5,y,2;5,y,4;5,z,3;5,z,4;5,z,8;5,z,0;5,z,5;5,z,1;5,z,2;6,x,6;6,x,8;6,x,2;6,x,0;6,x,4;6,x,7;6,x,5;6,y,3;6,y,0;6,y,8;6,y,6;6,y,2;6,z,0;6,z,4;6,z,8;6,z,6;6,z,5;6,z,2;7,x,8;7,x,2;7,x,1;7,x,5;7,x,3;7,x,0;7,y,1;7,y,2;7,y,8;7,y,5;7,z,2;7,z,3;7,z,5;7,z,4;7,z,8;7,z,6;8,x,8;8,x,5;8,x,6;8,x,7;8,y,6;8,y,4;8,y,1;8,y,7;8,y,0;8,z,1;8,z,2;8,z,4;8,z,0#8#0;2;3;8");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/8;0/1/2/4;0/1/4/6/7;5/6/7/8;8#x;y;z#0/1/2/3/4/5/6/7/8,x,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,y,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,z,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/8,x,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/8,y,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/8,z,0/1/2/3/4/5/6/7/8;0/1/2/4,x,0/1/2/3/4/5/6/7/8;0/1/2/4,y,0/1/2/3/4/5/6/7/8;0/1/2/4,z,0/1/2/3/4/5/6/7/8;0/1/4/6/7,x,0/1/2/3/4/5/6/7/8;0/1/4/6/7,y,0/1/2/3/4/5/6/7/8;0/1/4/6/7,z,0/1/2/3/4/5/6/7/8;5/6/7/8,x,0/1/2/3/4/5/6/7/8;5/6/7/8,y,0/1/2/3/4/5/6/7/8;5/6/7/8,z,0/1/2/3/4/5/6/8;8,x,5/6/7/8;8,y,0/1/4/6/7;8,z,0/1/2/4#8#0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/8;0/1/2/4;0/1/4/6/7;5/6/7/8;8", nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#l;y;z#0,l,4;0,l,5;0,l,7;0,l,0;0,y,6;0,y,2;0,y,1;0,y,4;0,y,5;0,y,7;0,y,0;0,z,0;0,z,7;0,z,1;0,z,4;1,l,0;1,l,4;1,l,5;1,l,2;1,l,3;1,l,1;1,l,7;1,y,6;1,y,1;1,y,2;1,y,0;1,y,4;1,z,6;1,z,3;1,z,7;1,z,2;1,z,0;2,l,1;2,l,5;2,l,7;2,l,0;2,y,6;2,y,2;2,y,5;2,y,0;2,y,4;2,y,3;2,z,5;2,z,7;2,z,1;2,z,4;3,l,0;3,l,3;3,l,7;3,l,4;3,l,6;3,l,2;3,y,5;3,y,0;3,y,2;3,y,7;3,y,6;3,y,1;3,y,4;3,z,3;3,z,2;3,z,6;3,z,4;3,z,5;4,l,5;4,l,7;4,l,0;4,l,3;4,y,2;4,y,0;4,y,4;4,y,6;4,y,1;4,y,7;4,z,4;4,z,3;4,z,6;4,z,5;4,z,1;5,l,4;5,l,3;5,l,0;5,l,2;5,l,7;5,l,6;5,y,0;5,y,6;5,y,7;5,y,3;5,y,4;5,y,2;5,z,1;5,z,7;5,z,5;5,z,3;5,z,2;5,z,6;5,z,4;6,l,7;6,l,5;6,l,2;6,l,3;6,y,7;6,y,0;6,y,1;6,y,4;6,y,2;6,y,5;6,z,3;6,z,0;6,z,2;6,z,5;7,l,4;7,l,5;7,l,6;7,l,2;7,l,7;7,l,0;7,l,3;7,y,4;7,y,5;7,y,1;7,y,2;7,y,0;7,z,4;7,z,0;7,z,5;7,z,1;7,z,2;7,z,6#3#2;3");
		assertEquals("0/1/2/3/4/5/6/7;0/1/2/4/5/6/7;0/2/3/4/6/7;2/3/4/5/6;3#l;y;z#0/1/2/3/4/5/6/7,l,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,y,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,z,0/1/2/3/4/5/6/7;0/1/2/4/5/6/7,l,0/1/2/3/4/5/6/7;0/1/2/4/5/6/7,y,0/1/2/3/4/5/6/7;0/1/2/4/5/6/7,z,0/1/2/3/4/5/6/7;0/2/3/4/6/7,l,0/1/2/3/4/5/6/7;0/2/3/4/6/7,y,0/1/2/3/4/5/6/7;0/2/3/4/6/7,z,0/1/2/3/4/5/6/7;2/3/4/5/6,l,0/1/2/3/4/5/6/7;2/3/4/5/6,y,0/1/2/3/4/5/6/7;2/3/4/5/6,z,0/1/2/3/4/5/6/7;3,l,0/2/3/4/6/7;3,y,0/1/2/4/5/6/7;3,z,2/3/4/5/6#3#0/1/2/3/4/5/6/7;0/1/2/4/5/6/7;0/2/3/4/6/7;2/3/4/5/6;3", nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#i;q;u;v#0,i,1;1,e,8;2,v,3;3,u,4;4,q,5;5,e,6;6,e,8;7,e,0;7,e,2#7#8");
		assertEquals("-1;0/2/7;1/8;3;4;5/6/8#i;q;u;v#-1,i,-1;-1,q,-1;-1,u,-1;-1,v,-1;0/2/7,i,1/8;0/2/7,q,-1;0/2/7,u,-1;0/2/7,v,3;1/8,i,-1;1/8,q,-1;1/8,u,-1;1/8,v,-1;3,i,-1;3,q,-1;3,u,4;3,v,-1;4,i,-1;4,q,5/6/8;4,u,-1;4,v,-1;5/6/8,i,-1;5/6/8,q,-1;5/6/8,u,-1;5/6/8,v,-1#0/2/7#1/8;5/6/8", nfaToDfa.toString());
	}

}